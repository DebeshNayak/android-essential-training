Units of measurement:
* Setting Component Size and Position:
    - Set dimension values for visual components.
  - Primarily set in XML-layout files or programmatically.
  - Most dimensions can be changed at runtime.
* Device-Independent Pixels
  - dp (device-independent pixels)
    * Control position and size of containers and widgets
    * On 160dpi(dot per inch) screen, each dp mapped to a physical pixel
--------------------
* Setting Dimensions in Layout Files
  - Size and position can be hard-coded in XML layout
Example:
<TextView
  android:layout_width="wrap_content"
  android:layout_height="wrap_content"
  android:text="Hello Android!"
  android:layout_marginLeft="100dp"
  android:layout_marginTop="100dp"/>
- dp or device independent pixels is used for the placement and size of objects
----------------------------
* Scale-Independent Pixels:
  - sp (scale-independent pixels)
    * Similar to dp, but used to specify font sizes
<Textview
  android:layout_width="wrap_content"
  android:layout_height="wrap_content"
  android:text="Hello Android"
  android:textSize="24sp"/>
----------------------------
* Using Dimension Resources:
  [- In order to manage all of the dimensions throughout an app, it's very common to use "dimension resources".
  - A dimension resource is defined in an XML file that's placed in the values folder under resources.]
  - Dimension resource files define reusable dimensions
  - Place in res/values folder
  - Simple dimens.xml file
<resources>
  <dimen name="activity_horizontal_margin">16dp</dimen>
  <dimen name="activity_vertical_margin">16dp</dimen>
  <dimen name="fab_margin">16dp</dimen>
</resources>
----------------------------
* Referring to Dimension Resources:
<LinearLayout
  xmlns:android="http://schemas.android.com/apk/res/android"
  android:layout_width="match_parent"
  android:layout_height="match_parent"
  android:paddingBottom="@dimen/activity_vertical_margin"
  android:paddingLeft="@dimen/activity_horizontal_margin"
  android:paddingRight="@dimen/activity_horizontal_margin"
  android:paddingTop="@dimen/activity_vertical_margin">
  <TextView
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="@string/hello_world" />
</LinearLayout>
------------------
* Managing Multiple Screens:
  - Default dimensions XML file is in res/values
  - Alternative settings for different sizes and orientations
values    -> Default values
  dimens.xml
  strings.xml
  styles.xml
values-2320dp   -> Any side >= 820dp
  dimens.xml
-----------------
* Setting Fixed Dimensions with Java
  - A layoutParams object in each view (widget)
  - Set height/width, etc. as properties of layoutParams
Button myButton = (Button)findViewById(R.id.mybutton);
myButton.getLayoutParams().height = 100;
  - Results in setting dimensions as absolute pixels
  - This is not usually the best approach.
----------------
Setting DP with Java:
- While working with Java code, we will work with device-independent pixels.
- Convert pixels to dp with TypedValue.applyDimension
- Get screen density and resolution from getResources().getDisplayMetrics()

float pixels = TypedValue.applyDimension(
  TypedValue.COMPLEX_UNIT_DIP, 100,
    getResources().getDisplayMetrics());
myButton.getLayoutParams().height = (int)pixels;
