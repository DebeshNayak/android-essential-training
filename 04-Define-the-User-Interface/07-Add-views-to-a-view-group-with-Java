Add views to a view group with Java:
- Each element that you add to an XML layout file, such as relative layout or
  TextView, represents an instance of a Java class.
- You can actually add components to your screens dynamically using Java code.
- In order to add objects to your LinearLayout container, you'll need to get a
  reference to it and for that you'll need to add an ID.
---------------------
- The ID is an attribute. It starts with android:id and then the actual string
  that represents the ID always starts with @+id/.
- The plus character means I'm adding an ID. Next, I'll sign the ID to content_layout.
- Now there is a process running in the background of Android Studio that's examining
  this file and it's generating a Java class that has unique numeric values, one for
  each of these IDs.
- That's how you'll get the reference.
--------------------
- After adding the following line:
LinearLayout layout = findViewById(R.id.content_layout);
- we will get squiggly error. That is because findViewById() is the method of the View class.
- And the View class is the super class of the LinearLayout class.
- So we need to add casting syntax.
- Each object is an instance of a class that's extended from View and you need to
  assign some layout parameters.
- The most important ones are the height and the width and these are contained in
  an instance of a class named LayoutParams.
- That's a nested class within ViewGroup.
--------------------
- Notice that they're added after the existing TextView that's defined in the XML layout file
  and this gives you a hint about the order of execution.
- Anything in the layout file is executed first and then anything in your onCreate method in the Java class
  is executed after that.
- But as you can see, you can easily control the appearance of your application with Java code,
  used either by itself or in combination with the XML layout file.
--------------------
Example: 04-LayoutWithCode project
